{"version":3,"sources":["Components/Break.js","Components/Session.js","App.js","reportWebVitals.js","index.js"],"names":["Break","useState","breakLengthInSeconds","setBreakLengthInSeconds","breakLengthInMinutes","moment","duration","minutes","id","onClick","newBreakLengthInSeconds","Session","sessionLengthInSeconds","setSessionLengthInSeconds","sessionLengthInMinutes","newSessionLengthInSeconds","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPA4BeA,EAzBD,WAAM,MAEwCC,mBAAS,KAFjD,mBAETC,EAFS,KAEaC,EAFb,KAeVC,EAAuBC,IAAOC,SAASJ,EAAsB,KAAKK,UACxE,OACI,gCACA,mBAAGC,GAAG,cAAN,mBACA,mBAAGA,GAAG,eAAN,SAAsBJ,IACtB,wBAAQI,GAAG,kBAAkBC,QAPO,kBAAMN,EAAwBD,EAAuB,KAOzF,iBACA,wBAAQM,GAAG,kBAAkBC,QAjBO,WACpC,IAAMC,EAA0BR,EAAuB,EAEnDC,EADAO,EAA0B,EACF,EAEAA,IAY5B,qBCGOC,EAxBC,WAAO,IAAD,EAC0CV,mBAAS,MADnD,mBACXW,EADW,KACaC,EADb,KAaZC,EAAyBT,IAAOC,SAASM,EAAwB,KAAKL,UAC5E,OACI,gCACI,mBAAGC,GAAG,gBAAN,qBACA,mBAAGA,GAAG,iBAAN,SAAwBM,IACxB,wBAAQN,GAAG,oBAAoBC,QAPG,kBAAMI,EAA0BD,EAAyB,KAO3F,iBACA,wBAAQJ,GAAG,oBAAoBC,QAhBH,WAChC,IAAMM,EAA4BH,EAAyB,GAEvDC,EADAE,EAA4B,EACF,EAEAA,IAW1B,qB,MCRGC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3147fbe0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\n\nconst Break = () => {\n    //Initialize break length using useState\n    const [breakLengthInSeconds, setBreakLengthInSeconds] = useState(300);\n    \n    const decrementBreakLengthByOneMinute = () => {\n        const newBreakLengthInSeconds = breakLengthInSeconds - 6;\n        if (newBreakLengthInSeconds < 0) {\n            setBreakLengthInSeconds(0);\n        } else {\n            setBreakLengthInSeconds(newBreakLengthInSeconds);\n        }\n    };\n    \n    const incrementBreakLengthByOneMinute = () => setBreakLengthInSeconds(breakLengthInSeconds + 60);\n         // the seconds to minutes conversion is here!\n    const breakLengthInMinutes = moment.duration(breakLengthInSeconds, 's').minutes();\n    return (\n        <div>\n        <p id=\"break-label\">Break</p>\n        <p id=\"break-length\">{breakLengthInMinutes}</p>\n        <button id=\"break-increment\" onClick={incrementBreakLengthByOneMinute}> + </button>\n        <button id=\"break-decrement\" onClick={decrementBreakLengthByOneMinute}> - </button>\n        </div>\n    );\n};\nexport default Break;\n","import React, { useState } from 'react';\nimport moment from 'moment'\n\nconst Session = () => {\n    const [sessionLengthInSeconds, setSessionLengthInSeconds] = useState(60 * 25);\n\n    const decrementSessionByOneMinute = () => {\n        const newSessionLengthInSeconds = sessionLengthInSeconds - 60;\n        if (newSessionLengthInSeconds < 0 ){\n            setSessionLengthInSeconds(0);\n        } else {\n            setSessionLengthInSeconds(newSessionLengthInSeconds);\n        }\n    };\n    const incrementSessionLengthByOneMinute = () => setSessionLengthInSeconds(sessionLengthInSeconds + 60);\n    \n    const sessionLengthInMinutes = moment.duration(sessionLengthInSeconds, 's').minutes();\n    return(\n        <div>\n            <p id=\"session-label\">Session</p>\n            <p id=\"session-length\">{sessionLengthInMinutes}</p>\n            <button id=\"session-increment\" onClick={incrementSessionLengthByOneMinute}> + </button>\n            <button id=\"session-decrement\" onClick={decrementSessionByOneMinute}> - </button>\n        </div>\n    );\n};\n\nexport default Session;\n","import React from 'react';\nimport Break from './Components/Break';\nimport Session from './Components/Session';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Break />\n        <Session />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}